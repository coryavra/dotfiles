# Shell PROMPT used during pentests

# POSIX sh supports hexadecimal and octal escape sequences
escape_hex="\x1b"
escape_oct="\033"

# We'll default to hex escape sequence
escape="${escape_hex}"

# Sequence prefixes
csi="${escape}["  # Control Sequence Introducer
dcs="${escape}P"  # Device Control String
osc="${escape}]"  # Operating System Command

# Function to set graphics rendition (SGR) code
SetGraphicsRendition() {
  printf "${csi}%sm" "$1"
}

# Abbreviate SetGraphicsRendition to SGR for easier usage
SGR() {
  SetGraphicsRendition "$@"
}

# Set foreground color to xterm 256 value
ansi_set_fg_color() {
  SGR "38;5;$1"                           # 38;5 = 256 color mode
}

# Reset all text attributes
THEME_RESET=$(SGR 0)

# Banner
theme_banner_art=$(ansi_set_fg_color 172)
theme_banner_info_text=$(ansi_set_fg_color 99)
theme_banner_info_text_initial=$(ansi_set_fg_color 125)
theme_banner_info_update_date=$(ansi_set_fg_color 150)
theme_banner_info_name=$(ansi_set_fg_color 92)
theme_banner_info_handle=$(ansi_set_fg_color 124)
theme_banner_info_theme=$(ansi_set_fg_color 92)

theme_welcome_qotd=$(ansi_set_fg_color 178)

# Prompt
theme_prompt_time=$(ansi_set_fg_color 57)
theme_prompt_root=$(ansi_set_fg_color 196)
theme_prompt_user=$(ansi_set_fg_color 33)
theme_prompt_spacer=$(ansi_set_fg_color 245)
theme_prompt_host=$(ansi_set_fg_color 33)
theme_prompt_ip=$(ansi_set_fg_color 208)
theme_prompt_directory=$(ansi_set_fg_color 201)

# Text
theme_variable=$(ansi_set_fg_color 162)
theme_text_stressed=$(ansi_set_fg_color 208)

# Print statements
theme_timestamp=$(ansi_set_fg_color 117)
theme_info=$(ansi_set_fg_color 28)
theme_warning=$(ansi_set_fg_color 226)
theme_error=$(ansi_set_fg_color 196)
theme_success=$(ansi_set_fg_color 51)
theme_tip=$(ansi_set_fg_color 201)
theme_debug=$(ansi_set_fg_color 245)
theme_input=$(ansi_set_fg_color 33)

# Markdown statements
theme_markdown_line=$(ansi_set_fg_color 245)
theme_markdown_heading=$(ansi_set_fg_color 99)
theme_markdown_body=$(ansi_set_fg_color 250)
theme_markdown_block=$(ansi_set_fg_color 250)
theme_markdown_code=$(ansi_set_fg_color 208)
theme_markdown_link=$(ansi_set_fg_color 33)
theme_markdown_list_item=$(ansi_set_fg_color 250)


# PROMPT STRUCTURE

# Start of first line
PS1="%{$THEME_RESET%}"
PS1="${PS1}┌─["

# Timestamp
PS1="${PS1}%{$theme_prompt_time%}"
PS1="${PS1}%D{%b %d %I:%M:%S %p}"

# Spacer
PS1="${PS1}%{$THEME_RESET%}"
PS1="${PS1}]─["

# Use different colors for root vs user
if [ "$(id -u)" -eq 0 ]; then
    PS1="${PS1}%{$theme_prompt_root%}"   # Root
else
    PS1="${PS1}%{$theme_prompt_user%}"   # User
fi

# Username
PS1="${PS1}$(whoami)"

# Spacer
PS1="${PS1}%{$theme_prompt_spacer%}"
PS1="${PS1}@"

# Hostname
PS1="${PS1}%{$theme_prompt_host%}"
PS1="${PS1}$(hostname)"

# Spacer
PS1="${PS1}%{$theme_prompt_spacer%}"
PS1="${PS1}@"

# IP Address from Wireless NIC
PS1="${PS1}%{$theme_prompt_ip%}"
PS1="${PS1}$(ipconfig getifaddr en0)"

# Spacer
PS1="${PS1}%{$THEME_RESET%}"
PS1="${PS1}]─["

# Current Directory
PS1="${PS1}%{$theme_prompt_directory%}"
PS1="${PS1}%~"

# End of first line
PS1="${PS1}%{$THEME_RESET%}"
PS1="${PS1}]"

# Newline
PS1="${PS1}
"

# Start of second line
PS1="${PS1}└─"

# Prompt symbol
if [ "$(id -u)" -eq 0 ]; then
    PS1="${PS1}%{$theme_prompt_root%}#"        # Root prompt symbol color for root user
else
    PS1="${PS1}%{$theme_prompt_user%}\$"       # Regular user prompt symbol color
fi

# Space before command
PS1="${PS1}%{$THEME_RESET%}"
PS1="${PS1} "

# Special hook that runs just before each prompt is displayed.
precmd() {

	# Print a new line before each prompt
	printf "\n"

	# Check for git repo at current directory, and show branch in right-aligned prompt
	branch=$(git symbolic-ref --short HEAD 2>/dev/null)
	if [ -n "$branch" ]; then
		RPROMPT="[$branch]"
	else
		RPROMPT=""
	fi
}

# Hide EOL (End Of Line) sign ('%'), which prints when text is missing a newline at the end
PROMPT_EOL_MARK=""